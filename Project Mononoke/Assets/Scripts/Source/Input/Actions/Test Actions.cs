//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.6.3
//     from Assets/Input Actions/Test Actions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @TestActions: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @TestActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Test Actions"",
    ""maps"": [
        {
            ""name"": ""Test Map"",
            ""id"": ""d0fabb45-cb48-4d10-99de-9f852e4eed55"",
            ""actions"": [
                {
                    ""name"": ""Click"",
                    ""type"": ""Button"",
                    ""id"": ""415723ee-ef3a-47fa-a507-546ecd9cfc60"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Exit"",
                    ""type"": ""Button"",
                    ""id"": ""432d3c42-fc36-4367-ad29-2be3387f224f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""2c6a1c27-4397-49a2-8b5f-f43684407455"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouse+Keyboard"",
                    ""action"": ""Click"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""fa532c8a-e161-4132-917e-c2f1acdecfb3"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouse+Keyboard"",
                    ""action"": ""Exit"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Mouse+Keyboard"",
            ""bindingGroup"": ""Mouse+Keyboard"",
            ""devices"": [
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // Test Map
        m_TestMap = asset.FindActionMap("Test Map", throwIfNotFound: true);
        m_TestMap_Click = m_TestMap.FindAction("Click", throwIfNotFound: true);
        m_TestMap_Exit = m_TestMap.FindAction("Exit", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Test Map
    private readonly InputActionMap m_TestMap;
    private List<ITestMapActions> m_TestMapActionsCallbackInterfaces = new List<ITestMapActions>();
    private readonly InputAction m_TestMap_Click;
    private readonly InputAction m_TestMap_Exit;
    public struct TestMapActions
    {
        private @TestActions m_Wrapper;
        public TestMapActions(@TestActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Click => m_Wrapper.m_TestMap_Click;
        public InputAction @Exit => m_Wrapper.m_TestMap_Exit;
        public InputActionMap Get() { return m_Wrapper.m_TestMap; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(TestMapActions set) { return set.Get(); }
        public void AddCallbacks(ITestMapActions instance)
        {
            if (instance == null || m_Wrapper.m_TestMapActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_TestMapActionsCallbackInterfaces.Add(instance);
            @Click.started += instance.OnClick;
            @Click.performed += instance.OnClick;
            @Click.canceled += instance.OnClick;
            @Exit.started += instance.OnExit;
            @Exit.performed += instance.OnExit;
            @Exit.canceled += instance.OnExit;
        }

        private void UnregisterCallbacks(ITestMapActions instance)
        {
            @Click.started -= instance.OnClick;
            @Click.performed -= instance.OnClick;
            @Click.canceled -= instance.OnClick;
            @Exit.started -= instance.OnExit;
            @Exit.performed -= instance.OnExit;
            @Exit.canceled -= instance.OnExit;
        }

        public void RemoveCallbacks(ITestMapActions instance)
        {
            if (m_Wrapper.m_TestMapActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ITestMapActions instance)
        {
            foreach (var item in m_Wrapper.m_TestMapActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_TestMapActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public TestMapActions @TestMap => new TestMapActions(this);
    private int m_MouseKeyboardSchemeIndex = -1;
    public InputControlScheme MouseKeyboardScheme
    {
        get
        {
            if (m_MouseKeyboardSchemeIndex == -1) m_MouseKeyboardSchemeIndex = asset.FindControlSchemeIndex("Mouse+Keyboard");
            return asset.controlSchemes[m_MouseKeyboardSchemeIndex];
        }
    }
    public interface ITestMapActions
    {
        void OnClick(InputAction.CallbackContext context);
        void OnExit(InputAction.CallbackContext context);
    }
}
